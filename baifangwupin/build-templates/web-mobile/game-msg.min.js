"use strict";
var u = navigator.userAgent,

    
    isAndroid = -1 < u.indexOf("Android") || -1 < u.indexOf("Adr"),
    isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/),
    iosFunction = function (e) {
        console.log('------------1', navigator.userAgent)
        if (window.WebViewJavascriptBridge)
            return e(window.WebViewJavascriptBridge);
        if (window.WVJBCallbacks)
            return window.WVJBCallbacks.push(e);
        window.WVJBCallbacks = [e];
        var t = document.createElement("iframe");
        t.style.display = "none",
            t.src = "wvjbscheme://__BRIDGE_LOADED__",
            document.documentElement.appendChild(t),
            setTimeout(function () {
                document.documentElement.removeChild(t)
            }, 0)
    },
    androidFunction = function (e) {
        window.WebViewJavascriptBridge ? e(window.WebViewJavascriptBridge) : document.addEventListener("WebViewJavascriptBridgeReady", function () {
            e(window.WebViewJavascriptBridge)
        }, !1)
    };
window.setupWebViewJavascriptBridge = isAndroid ? androidFunction : iosFunction, console.log("isAndroid ", isAndroid), console.log("isIOS ", isIOS), isAndroid && window.setupWebViewJavascriptBridge(function (e) {
    e.init(function (e, t) {
            console.log(e),
                t("JS 返回给原生的消息内容")
        }),
        e.registerHandler("GameMsg2Web", function (e, t) {
            console.log("GameMsg2Web app 返回消息 ", e),
                postMessageToGame(e),
                t && t("")
        })
}), isIOS && window.setupWebViewJavascriptBridge(function (e) {
    e.registerHandler("GameMsg2Web", function (e, t) {
        console.log("GameMsg2Web app 返回消息 ", e),
            postMessageToGame(e),
            t && t("")
    })
});
var postMessageToGame = function (e) {
        window.postMessage({
            type: "gameMsg",
            msg: e
        }, "*")
    },
    GameMsg2App = function (t) {
        (isAndroid || isIOS) && window.setupWebViewJavascriptBridge(function (e) {
            e.callHandler("GameMsg2App", t, function (e) {
                console.log("GameMsg2App web 发送消息 ", e)
            })
        })
    };
(typeof window == "undefined" ? global : window).gameMsg = {
    page_events: {},
    client_events: ["disabled", "init", "stop", "data_recovery", "action_sync_receive", "reload", "threshhold", "audio_control"],
    on_client_event: function (e, t) {
        var n = this;
        if (e && -1 != this.client_events.indexOf(e)) {
            Object.keys(this.page_events).length || window.addEventListener("message", function (e) {
                if (e && e.data) {
                    if ("gameMsg" != e.data.type) return;
                    n.exec_handlers(n.page_events[e.data.msg.type], e.data.msg)
                }
            }, !1);
            var i = this.page_events;
            i[e] ? i[e].push(t) : i[e] = [t]
        } else console.warn("不存在的消息类型")
    },
    exec_handlers: function (e, t) {
        if (e && e.length)
            for (var n = 0, i = e.length; n < i; n++) e[n](t.data)
    },
    off: function () {
        window.removeEventListener("message")
    },
    last: null,
    last_type: null,
    threshhold: 100,
    send_to_client: function (e) {
        var t = +new Date;
        if (!(this.last_type == e.type && this.last && t < this.last + this.threshhold)) {
            this.last = t, this.last_type = e.type;
            var n = window.self == window.parent;
            console.log("noParent ", n), n ? GameMsg2App(e) : window.parent.postMessage({
                type: "gameMsg",
                msg: e
            }, "*")
        }
    },
    engine_load_start: function (e, t) {
        this.send_to_client({
            type: "engine_load_start",
            data: {
                type: e,
                engine_version: t
            }
        })
    },
    engine_load_complete: function () {
        this.send_to_client({
            type: "engine_load_complete"
        })
    },
    res_load_start: function (e, t) {
        this.send_to_client({
            type: "res_load_start",
            data: {
                type: e,
                protocol_version: t
            }
        })
    },
    res_load_process: function (e) {
        this.send_to_client({
            type: "res_load_process",
            data: e
        })
    },
    res_load_complete: function () {
        this.send_to_client({
            type: "res_load_complete"
        })
    },
    action_sync_send: function (e, t) {
        this.send_to_client({
            type: "action_sync_send",
            data: {
                action_id: e,
                action: t
            }
        })
    },
    answer_sync_send: function (e) {
        this.send_to_client({
            type: "answer_sync_send",
            data: {
                answer_data: e
            }
        })
    },
    data_archival: function (e, t) {
        this.send_to_client({
            type: "data_archival",
            data: {
                action_id: e,
                data: t
            }
        })
    },
    game_start: function () {
        this.send_to_client({
            type: "game_start"
        })
    },
    game_over: function (e) {
        this.send_to_client({
            type: "game_over",
            data: e
        })
    },
    finished: function () {
        this.send_to_client({
            type: "finished"
        })
    }
};